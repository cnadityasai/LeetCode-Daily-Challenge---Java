// Brute Force

class Solution {
    public int[] frequencySort(int[] nums) {
        int n = nums.length;
        Map<Integer, Integer> map = new HashMap<>();

        Integer[] temp = new Integer[n];

        for(int i=0; i<n; i++){
            temp[i] = nums[i];
        }

        for(int num: nums){
            map.put(num, map.getOrDefault(num, 0)+1);
        }

        Arrays.sort(temp, new Comparator<Integer>(){
            public int compare(Integer a, Integer b){
                if(map.get(a) == map.get(b)){
                    return b-a;
                }
                return map.get(a) - map.get(b);
            }
        });

        for(int i=0; i<n; i++){
            nums[i] = temp[i];
        }

        return nums;
    }
}

// Optimised Solution
// Instead of comparing all the elements we just compare the element one single time and place it onto the array using the frequency map-

class Solution {
    public int[] frequencySort(int[] nums) {
        int n = nums.length;
        Map<Integer, Integer> map = new HashMap<>();

        for(int num: nums){
            map.put(num, map.getOrDefault(num, 0)+1);
        }

        Integer[] temp = new Integer[map.size()];

        int i=0;
        for(Integer key: map.keySet()){
            temp[i] = key;
            i++;
        }

        Arrays.sort(temp, new Comparator<Integer>(){
            public int compare(Integer a, Integer b){
                if(map.get(a) == map.get(b)){
                    return b-a;
                }
                return map.get(a) - map.get(b);
            }
        });

        i=0;
        for(int key: temp){
            int freq = map.get(key);
            for(int j=0; j<freq; j++){
                nums[i] = key;
                i++;
            }
        }

        return nums;
    }
}

