// Efficient solution

class Solution {
    public int countServers(int[][] grid) {
        int m = grid.length;
        int n = grid[0].length;
        int rowCount[] = new int[m];
        int colCount[] = new int[n];
        int count = 0;

        for(int i=0; i<m; i++){
            for(int j=0; j<n; j++){
                if(grid[i][j] == 1){
                    rowCount[i]++;
                    colCount[j]++;  
                    count++;
                }
            }
        }

        for(int i=0; i<m; i++){
            for(int j=0; j<n; j++){
                if(grid[i][j] == 1){
                    if(rowCount[i] == 1 && colCount[j] == 1){
                        count--;
                    }
                }
            }
        }
        return count;
    }
}


// Less efficient solution

class Solution {
    public int countServers(int[][] grid) {
        int m = grid.length;
        int n = grid[0].length;
        int dir[][] = {{-1, 0}, {0, 1}, {1, 0}, {0, -1}};
        Queue<int[]> q = new LinkedList<>();

        for(int i=0; i<m; i++){
            for(int j=0; j<n; j++){
                if(grid[i][j] == 1){
                    q.offer(new int[]{i,j});
                }    
            }
        }
        int count = 0;
        while(!q.isEmpty()){
            int[] cell = q.poll();
            int r = cell[0];
            int c = cell[1];

            for(int i=0; i<4; i++){
                int nr = r+dir[i][0];
                int nc = c+dir[i][1];
                boolean flag = false;
                while(nr>=0 && nr<m && nc>=0 && nc<n){
                    if(grid[nr][nc] == 1){
                        count++;
                        flag = true;
                        break;
                    }
                    nr += dir[i][0];
                    nc += dir[i][1];
                }
                if(flag == true)
                    break;
            }
        }
        return count;
    }
}
