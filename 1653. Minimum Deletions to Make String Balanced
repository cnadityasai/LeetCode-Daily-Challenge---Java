// Not optimised Solution

class Solution {
    public int minimumDeletions(String s) {
        int n = s.length();
        int aCount[] = new int[n];
        int bCount[] = new int[n];
        
        for(int i=1; i<n; i++){
            char prevChar = s.charAt(i-1);
            bCount[i] = bCount[i-1];
            if(prevChar == 'b'){
                bCount[i] += 1;
            } 
        }
        for(int i=n-2; i>=0; i--){
            char prevChar = s.charAt(i+1);
            aCount[i] = aCount[i+1];
            if(prevChar == 'a'){
                aCount[i] += 1;
            } 
        }

        int minDel = Integer.MAX_VALUE;
        for(int i=0; i<n; i++){
            minDel = Math.min(minDel, aCount[i] + bCount[i]);
        }

        return minDel;
    }
}

// Intermediate Solution

class Solution {
    public int minimumDeletions(String s) {
        int n = s.length();
        int aCount[] = new int[n];

        for(int i=n-2; i>=0; i--){
            char prevChar = s.charAt(i+1);
            aCount[i] = aCount[i+1];
            if(prevChar == 'a'){
                aCount[i] += 1;
            } 
        }
        int bCount = 0;
        int minDel = Integer.MAX_VALUE;
        for(int i=0; i<n; i++){
            minDel = Math.min(minDel, aCount[i] + bCount);
            if(s.charAt(i) == 'b'){
                bCount += 1;
            }
        }

        return minDel;
    }
}

// Optimised Solution

class Solution {
    public int minimumDeletions(String s) {
        int n = s.length();
        int[] f = new int[n+1];
        int b = 0;
        for(int i=1; i<=n; i++){
            if(s.charAt(i-1) == 'b'){
                f[i] = f[i-1];
                ++b;
            } else {
                f[i] = Math.min(f[i-1] + 1, b);
            }
        }
        return f[n];
    }
}

