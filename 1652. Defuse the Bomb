// Not optimal Solution

class Solution {
    public int[] decrypt(int[] code, int k) {
        int n = code.length;
        int res[] = new int[n];

        for(int i=0; i<n; i++){
            if( k > 0){
                for(int j=i+1; j<i+1+k; j++){
                    res[i] += code[j%n];
                }
            } else if (k < 0){
                for(int j=i-1; j>i-1-Math.abs(k); j--){
                    res[i] += code[(((j%n)+n)%n)];
                }
            }
        }

        return res; 
    }
}


// Optimal Solution (Sliding Window)

class Solution {
    public int[] decrypt(int[] code, int k) {
        int n = code.length;
        int[] res = new int[n];

        if(k == 0) return res;

        int wSum = 0;
        int start = (k > 0)? 1: n+k;
        int end = (k > 0)? k: n-1;

        for(int i=start; i<=end; i++){
            wSum += code[i % n];
        }

        for(int i=0; i<n; i++){
            res[i] = wSum;
            wSum -= code[(start+i) % n];
            wSum += code[(end+i+1)%n];
        }

        return res;
    }
}
