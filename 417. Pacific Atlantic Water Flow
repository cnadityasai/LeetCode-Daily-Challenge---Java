// Initial Solution

class Solution {
    public List<List<Integer>> pacificAtlantic(int[][] heights) {
        int rows = heights.length;
        int cols = heights[0].length;
        boolean[][] pacific = new boolean[rows][cols];
        boolean[][] atlantic = new boolean[rows][cols];
        List<List<Integer>> ans = new ArrayList<>();

        for(int row=0; row<rows; row++){
            dfs(heights, pacific, row, 0, rows, cols);
        }
        for(int col=0; col<cols; col++){
            dfs(heights, pacific, 0, col, rows, cols);
        }

        for(int row=0; row<rows; row++){
            dfs(heights, atlantic, row, cols-1, rows, cols);
        }

        for(int col=0; col<cols; col++){
            dfs(heights, atlantic, rows-1, col, rows, cols);
        }

        for(int i=0; i<rows; i++){
            for(int j=0; j<cols; j++){
                if(pacific[i][j] && atlantic[i][j]){
                    ans.add(Arrays.asList(i, j));
                }
            }
        }
        return ans;


    }

    public void dfs(int[][] heights, boolean[][] visited, int r, int c, int rows, int cols){
        visited[r][c] = true;

        if(r + 1 < rows && visited[r+1][c] != true && heights[r+1][c] >= heights[r][c])
            dfs(heights, visited, r+1, c, rows, cols);
        if(c+1 < cols && visited[r][c+1] != true && heights[r][c+1] >= heights[r][c])
            dfs(heights, visited, r, c+1, rows, cols);
        if(r - 1 >= 0 && visited[r-1][c] != true && heights[r-1][c] >= heights[r][c])
            dfs(heights, visited, r-1, c, rows, cols);
        if(c-1 >= 0 && visited[r][c-1] != true && heights[r][c-1] >= heights[r][c])
            dfs(heights, visited, r, c-1, rows, cols);
    }
}

// Cleaner solution (same logic as above)

class Solution {
    int n, m;
    int[][] dirs = {{0,1}, {1,0}, {-1,0}, {0,-1}};
    public List<List<Integer>> pacificAtlantic(int[][] heights) {
        n = heights.length;
        m = heights[0].length;

        boolean[][] pacific = new boolean[n][m];
        boolean[][] atlantic = new boolean[n][m];

        for(int i=0; i<n; i++) dfs(heights, pacific, i, 0);
        for(int j=0; j<m; j++) dfs(heights, pacific, 0, j);
        for(int i=0; i<n; i++) dfs(heights, atlantic, i, m-1);
        for(int j=0; j<m; j++) dfs(heights, atlantic, n-1, j);

        List<List<Integer>> res = new ArrayList<>();

        for(int i=0; i<n; i++){
            for(int j=0; j<m; j++){
                if(pacific[i][j] && atlantic[i][j]){
                    res.add(Arrays.asList(i, j));
                }
            }
        }

        return res;

    }

    public void dfs(int[][] heights, boolean[][] visited, int r, int c){
        visited[r][c] = true;

        for(int[] dir: dirs){
            int nr = r + dir[0];
            int nc = c + dir[1];

            if(nr >= 0 && nr < n && nc >= 0 && nc < m && visited[nr][nc] != true && heights[nr][nc] >= heights[r][c])
                dfs(heights, visited, nr, nc); 
        }
    }
}
