class Solution {
    public int minimumSubarrayLength(int[] nums, int k) {
        int left = 0;
        int n = nums.length;
        int curOr = 0;
        int[] bitCount = new int[32];
        int minLength = Integer.MAX_VALUE;

        for(int right=0; right<n; right++){
            curOr |= nums[right];

            for(int bit=0; bit<32; bit++){
                if((nums[right] & (1 << bit)) != 0){
                    bitCount[bit]++;
                }
            }

            while(left<=right && curOr >= k){
                minLength = Math.min(minLength, right-left+1);
                int updatedOr = 0;

                for(int bit=0; bit<32; bit++){
                    if((nums[left] & (1 << bit)) != 0){
                        bitCount[bit]--;
                    }
                    if(bitCount[bit] > 0){
                        updatedOr |= (1 << bit);
                    }
                }

                curOr = updatedOr;
                left++;
            }
        }

        return minLength == Integer.MAX_VALUE ? -1 : minLength;
    }
}
