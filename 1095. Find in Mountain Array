/**
 * // This is MountainArray's API interface.
 * // You should not implement it, or speculate about its implementation
 * interface MountainArray {
 *     public int get(int index) {}
 *     public int length() {}
 * }
 */
 
class Solution {
    public int findInMountainArray(int target, MountainArray mountainArr) {
        int start = 0;
        int end = mountainArr.length() - 1;

        int peakIndex = searchForPeakIndex(mountainArr, start, end);

        int targetIndex = binarySearch(mountainArr, target, start, peakIndex);
        if(targetIndex != -1){
            return targetIndex;
        } else {
            return binarySearch(mountainArr, target, peakIndex, end);
        }
    }

    public int searchForPeakIndex(MountainArray mountainArr, int start, int end){
        while(start < end){
            int mid = start + (end - start) / 2;
            if(mountainArr.get(mid) < mountainArr.get(mid+1)){
                start = mid + 1;
            } else {
                end = mid;
            }
        }

        return start;
    }

    public int binarySearch(MountainArray mountainArr, int target, int start, int end){

        boolean isAsc = false;

        if(mountainArr.get(start) < mountainArr.get(end-1)){
            isAsc = true;
        }

        while(start <= end){
            int mid = start + (end - start) / 2;
            if(mountainArr.get(mid) == target){
                return mid;
            }

            if(isAsc){
                if(mountainArr.get(mid) < target){
                    start = mid+1;
                } else {
                    end = mid-1;
                }
            } else {
                if(mountainArr.get(mid) > target){
                    start = mid+1;
                } else {
                    end = mid-1;
                }
            }
        }
        return -1;
    }
}
